// <auto-generated />
using System;
using Help.Infrastructure.DB.SqlServer.EFCore.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Help.Infrastructure.DB.SqlServer.EFCore.Migrations
{
    [DbContext(typeof(HelpContext))]
    [Migration("20240523075629_ReCreation")]
    partial class ReCreation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Help.Domain.Core.AccountAgg.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AlleyNumber")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AlleyNumber = 0,
                            CityId = 1,
                            CreationDate = new DateTime(2024, 5, 23, 0, 56, 27, 841, DateTimeKind.Local).AddTicks(6654),
                            Description = " ",
                            IsRemoved = false,
                            StreetName = " "
                        });
                });

            modelBuilder.Entity("Help.Domain.Core.AccountAgg.Entities.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfEmployeement")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TerminationDateContract")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2024, 5, 23, 0, 56, 27, 842, DateTimeKind.Local).AddTicks(8769),
                            DateOfEmployeement = new DateTime(2024, 5, 23, 0, 56, 27, 842, DateTimeKind.Local).AddTicks(8776),
                            Email = "marya.6t@gmail.com",
                            EmployeeID = 1,
                            FullName = "MaryamTalebzadeh",
                            IsRemoved = false,
                            Mobile = "09380000000",
                            Password = "10000.lyz67IGPgBUonnD4LNGVTQ==.4tH6b2mcWg+vVPSEHhzaEX0aatIlFdqGDcI+NUA/VLA=",
                            RoleId = 1,
                            TerminationDateContract = new DateTime(2024, 9, 23, 0, 56, 27, 842, DateTimeKind.Local).AddTicks(8728),
                            UserName = "Mary"
                        });
                });

            modelBuilder.Entity("Help.Domain.Core.AccountAgg.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProvinceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = " ",
                            CreationDate = new DateTime(2024, 5, 23, 0, 56, 27, 843, DateTimeKind.Local).AddTicks(2496),
                            IsRemoved = false,
                            Name = " ",
                            ProvinceName = " "
                        });
                });

            modelBuilder.Entity("Help.Domain.Core.AccountAgg.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CardNumber")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<short?>("Score")
                        .HasColumnType("smallint");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 1,
                            CreationDate = new DateTime(2024, 5, 23, 0, 56, 27, 845, DateTimeKind.Local).AddTicks(610),
                            Email = "marya.6t@gmail.com",
                            FullName = "firstUser",
                            IsActive = false,
                            IsRemoved = false,
                            Mobile = "09380000000",
                            Password = "1234",
                            RoleId = 2,
                            Score = (short)0,
                            UserName = "user1"
                        });
                });

            modelBuilder.Entity("Help.Domain.Core.AccountAgg.Entities.CustomerPicture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Alt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRejected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("CustomerPictures");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Alt = "Profile",
                            CreationDate = new DateTime(2024, 5, 23, 0, 56, 27, 845, DateTimeKind.Local).AddTicks(4266),
                            CustomerId = 1,
                            IsConfirmed = false,
                            IsRejected = false,
                            IsRemoved = false,
                            Name = "DefaultProfile.jpg",
                            Title = "Default Customer Profile"
                        });
                });

            modelBuilder.Entity("Help.Domain.Core.AccountAgg.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2024, 5, 23, 0, 56, 27, 845, DateTimeKind.Local).AddTicks(7017),
                            IsRemoved = false,
                            Title = "مدیر سیستم"
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2024, 5, 23, 0, 56, 27, 845, DateTimeKind.Local).AddTicks(7078),
                            IsRemoved = false,
                            Title = "کاربر عادی"
                        },
                        new
                        {
                            Id = 3,
                            CreationDate = new DateTime(2024, 5, 23, 0, 56, 27, 845, DateTimeKind.Local).AddTicks(7089),
                            IsRemoved = false,
                            Title = "دستیار ادمین"
                        });
                });

            modelBuilder.Entity("Help.Domain.Core.HelpServiceAgg.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2024, 5, 23, 0, 56, 27, 846, DateTimeKind.Local).AddTicks(457),
                            Description = "تعمیر انواع لوازم خانگی",
                            IsRemoved = false,
                            Title = "تعمیرات"
                        });
                });

            modelBuilder.Entity("Help.Domain.Core.HelpServiceAgg.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("HelpRequestId")
                        .HasColumnType("int");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRejected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<short>("Score")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("HelpRequestId");

                    b.HasIndex("ParentId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Help.Domain.Core.HelpServiceAgg.Entities.HelpRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRejected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<double>("ProposedPrice")
                        .HasColumnType("float");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("StatusId");

                    b.ToTable("HelpRequests");
                });

            modelBuilder.Entity("Help.Domain.Core.HelpServiceAgg.Entities.HelpRequestPicture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Alt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("HelpRequestId")
                        .HasColumnType("int");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("HelpRequestId");

                    b.ToTable("HelpRequestPictures");
                });

            modelBuilder.Entity("Help.Domain.Core.HelpServiceAgg.Entities.HelpRequestStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("HelpRequestStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2024, 5, 23, 0, 56, 27, 872, DateTimeKind.Local).AddTicks(7460),
                            Description = "درخواست شما اول باید توسط ادمین تایید شود. از صبوری شما سپاس گذاریم.",
                            IsRemoved = false,
                            Title = "منتظر تایید ادمین"
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2024, 5, 23, 0, 56, 27, 872, DateTimeKind.Local).AddTicks(7592),
                            Description = "منتظر پیشنهادات",
                            IsRemoved = false,
                            Title = "انجام نشده"
                        },
                        new
                        {
                            Id = 3,
                            CreationDate = new DateTime(2024, 5, 23, 0, 56, 27, 872, DateTimeKind.Local).AddTicks(7606),
                            Description = "این درخواست در حال انجام می باشد.",
                            IsRemoved = false,
                            Title = "در حال انجام"
                        },
                        new
                        {
                            Id = 4,
                            CreationDate = new DateTime(2024, 5, 23, 0, 56, 27, 872, DateTimeKind.Local).AddTicks(7628),
                            Description = "این درخواست منقضی شده.",
                            IsRemoved = false,
                            Title = "تمام شده"
                        });
                });

            modelBuilder.Entity("Help.Domain.Core.HelpServiceAgg.Entities.HelpService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("PictureId")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("HelpServices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreationDate = new DateTime(2024, 5, 23, 0, 56, 27, 873, DateTimeKind.Local).AddTicks(5398),
                            Description = "شیرآلات برای یک دلیل آشکار قسمت مهمی از خانه شما هستند: آن‌ها آب را برای انجام کارهای گوناگون توزیع می‌کنند. بنابراین، سالم نگه داشتن شیرآلات آشپزخانه، دستشویی و حمامدر شرایط درست کارکردشان امری ضروری است. برخی از موارد ممکن است باعث شود نیاز به تعمیر شیرآلات برند خاص پیدا کنید، از نشت آب گرفته تا سر و صدای اضافی. گاهی اوقات این مشکلات ناشی از قدیمی بودن شیرآلات است.",
                            IsRemoved = false,
                            PictureId = 0,
                            Slug = "تعمیرات شیرآلات",
                            Tags = "تعمیرات-شیرآلات",
                            Title = "تعمیرات شیرآلات"
                        });
                });

            modelBuilder.Entity("Help.Domain.Core.HelpServiceAgg.Entities.HelpServicePicture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Alt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId")
                        .IsUnique();

                    b.ToTable("HelpServicePictures");
                });

            modelBuilder.Entity("Help.Domain.Core.HelpServiceAgg.Entities.Proposal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("HelpRequestId")
                        .HasColumnType("int");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<double>("SuggestedPrice")
                        .HasColumnType("float");

                    b.Property<DateTime>("SuggestedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("HelpRequestId");

                    b.ToTable("Proposals");
                });

            modelBuilder.Entity("Help.Domain.Core.HelpServiceAgg.Entities.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<short>("Level")
                        .HasColumnType("smallint");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("Help.Domain.Core.WalletAgg.Entities.OperationType", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OperationTypes");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Title = "واریز"
                        },
                        new
                        {
                            Id = (byte)2,
                            Title = "برداشت"
                        });
                });

            modelBuilder.Entity("Help.Domain.Core.WalletAgg.Entities.Wallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("Wallets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Balance = 0.0,
                            CreationDate = new DateTime(2024, 5, 23, 0, 56, 27, 880, DateTimeKind.Local).AddTicks(4678),
                            CustomerId = 1,
                            IsRemoved = false
                        });
                });

            modelBuilder.Entity("Help.Domain.Core.WalletAgg.Entities.WalletOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<byte>("TypeId")
                        .HasColumnType("tinyint");

                    b.Property<int>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.HasIndex("WalletId");

                    b.ToTable("WalletOperations");
                });

            modelBuilder.Entity("Help.Domain.Core.AccountAgg.Entities.Address", b =>
                {
                    b.HasOne("Help.Domain.Core.AccountAgg.Entities.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Help.Domain.Core.AccountAgg.Entities.Admin", b =>
                {
                    b.HasOne("Help.Domain.Core.AccountAgg.Entities.Role", "Role")
                        .WithMany("Admins")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Help.Domain.Core.AccountAgg.Entities.Customer", b =>
                {
                    b.HasOne("Help.Domain.Core.AccountAgg.Entities.Address", "Address")
                        .WithOne("Customer")
                        .HasForeignKey("Help.Domain.Core.AccountAgg.Entities.Customer", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Help.Domain.Core.AccountAgg.Entities.Role", "Role")
                        .WithMany("Customers")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Help.Domain.Core.AccountAgg.Entities.CustomerPicture", b =>
                {
                    b.HasOne("Help.Domain.Core.AccountAgg.Entities.Customer", "Customer")
                        .WithOne("Profile")
                        .HasForeignKey("Help.Domain.Core.AccountAgg.Entities.CustomerPicture", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Help.Domain.Core.HelpServiceAgg.Entities.Category", b =>
                {
                    b.HasOne("Help.Domain.Core.HelpServiceAgg.Entities.Category", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Help.Domain.Core.HelpServiceAgg.Entities.Comment", b =>
                {
                    b.HasOne("Help.Domain.Core.AccountAgg.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Help.Domain.Core.HelpServiceAgg.Entities.HelpRequest", "HelpRequest")
                        .WithMany("Comments")
                        .HasForeignKey("HelpRequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Help.Domain.Core.HelpServiceAgg.Entities.Comment", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Customer");

                    b.Navigation("HelpRequest");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Help.Domain.Core.HelpServiceAgg.Entities.HelpRequest", b =>
                {
                    b.HasOne("Help.Domain.Core.AccountAgg.Entities.Customer", "Customer")
                        .WithMany("HelpRequests")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Help.Domain.Core.HelpServiceAgg.Entities.HelpService", "HelpService")
                        .WithMany("HelpRequests")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Help.Domain.Core.HelpServiceAgg.Entities.HelpRequestStatus", "Status")
                        .WithMany("HelpRequests")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("HelpService");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Help.Domain.Core.HelpServiceAgg.Entities.HelpRequestPicture", b =>
                {
                    b.HasOne("Help.Domain.Core.HelpServiceAgg.Entities.HelpRequest", "HelpRequest")
                        .WithMany("Pictures")
                        .HasForeignKey("HelpRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HelpRequest");
                });

            modelBuilder.Entity("Help.Domain.Core.HelpServiceAgg.Entities.HelpService", b =>
                {
                    b.HasOne("Help.Domain.Core.HelpServiceAgg.Entities.Category", "Category")
                        .WithMany("Services")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Help.Domain.Core.HelpServiceAgg.Entities.HelpServicePicture", b =>
                {
                    b.HasOne("Help.Domain.Core.HelpServiceAgg.Entities.HelpService", "HelpService")
                        .WithOne("Picture")
                        .HasForeignKey("Help.Domain.Core.HelpServiceAgg.Entities.HelpServicePicture", "ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HelpService");
                });

            modelBuilder.Entity("Help.Domain.Core.HelpServiceAgg.Entities.Proposal", b =>
                {
                    b.HasOne("Help.Domain.Core.AccountAgg.Entities.Customer", "Customer")
                        .WithMany("Proposals")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Help.Domain.Core.HelpServiceAgg.Entities.HelpRequest", "HelpRequest")
                        .WithMany("Proposals")
                        .HasForeignKey("HelpRequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("HelpRequest");
                });

            modelBuilder.Entity("Help.Domain.Core.HelpServiceAgg.Entities.Skill", b =>
                {
                    b.HasOne("Help.Domain.Core.AccountAgg.Entities.Customer", "Customer")
                        .WithMany("Skills")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Help.Domain.Core.HelpServiceAgg.Entities.HelpService", "HelpService")
                        .WithMany("Skills")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("HelpService");
                });

            modelBuilder.Entity("Help.Domain.Core.WalletAgg.Entities.Wallet", b =>
                {
                    b.HasOne("Help.Domain.Core.AccountAgg.Entities.Customer", "Customer")
                        .WithOne("Wallet")
                        .HasForeignKey("Help.Domain.Core.WalletAgg.Entities.Wallet", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Help.Domain.Core.WalletAgg.Entities.WalletOperation", b =>
                {
                    b.HasOne("Help.Domain.Core.WalletAgg.Entities.OperationType", "Type")
                        .WithMany("Operations")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Help.Domain.Core.WalletAgg.Entities.Wallet", "Wallet")
                        .WithMany("Operations")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Help.Domain.Core.AccountAgg.Entities.Address", b =>
                {
                    b.Navigation("Customer")
                        .IsRequired();
                });

            modelBuilder.Entity("Help.Domain.Core.AccountAgg.Entities.City", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Help.Domain.Core.AccountAgg.Entities.Customer", b =>
                {
                    b.Navigation("HelpRequests");

                    b.Navigation("Profile")
                        .IsRequired();

                    b.Navigation("Proposals");

                    b.Navigation("Skills");

                    b.Navigation("Wallet")
                        .IsRequired();
                });

            modelBuilder.Entity("Help.Domain.Core.AccountAgg.Entities.Role", b =>
                {
                    b.Navigation("Admins");

                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Help.Domain.Core.HelpServiceAgg.Entities.Category", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("Help.Domain.Core.HelpServiceAgg.Entities.Comment", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("Help.Domain.Core.HelpServiceAgg.Entities.HelpRequest", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Pictures");

                    b.Navigation("Proposals");
                });

            modelBuilder.Entity("Help.Domain.Core.HelpServiceAgg.Entities.HelpRequestStatus", b =>
                {
                    b.Navigation("HelpRequests");
                });

            modelBuilder.Entity("Help.Domain.Core.HelpServiceAgg.Entities.HelpService", b =>
                {
                    b.Navigation("HelpRequests");

                    b.Navigation("Picture")
                        .IsRequired();

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("Help.Domain.Core.WalletAgg.Entities.OperationType", b =>
                {
                    b.Navigation("Operations");
                });

            modelBuilder.Entity("Help.Domain.Core.WalletAgg.Entities.Wallet", b =>
                {
                    b.Navigation("Operations");
                });
#pragma warning restore 612, 618
        }
    }
}
